--map_data_id_trigger
DELIMITER $
CREATE TRIGGER map_data_trigger
BEFORE INSERT ON map_data
FOR EACH ROW
BEGIN
DECLARE max_DataID INT;
DECLARE condt INT;
SELECT COUNT(*) INTO condt FROM map_data WHERE userID =NEW.userID ;
SET max_DataID=0;
IF(condt>0) THEN
SELECT MAX(dataID) INTO max_DataID FROM map_data
WHERE userID =NEW.userID ;
SET NEW.dataID=max_DataID+1;
ELSE
SET NEW.dataID=1;
END IF;
END$
-------






--locations_trigger
--SOS ISWS SYNUHKH IF AN DEN YPARXEI MAX DATAID????
DELIMITER $
CREATE TRIGGER locations_trigger
BEFORE INSERT ON locations
FOR EACH ROW
BEGIN
DECLARE max_DataID INT;
DECLARE max_locationID INT;
DECLARE condt INT;
SELECT MAX(dataID) INTO max_DataID FROM map_data
WHERE userID =NEW.userID ;
SET NEW.dataID=max_DataID;
SELECT COUNT(*) INTO condt FROM locations WHERE userID =NEW.userID AND dataID=NEW.dataID ;
SET max_locationID=0;
IF(condt>0) THEN
SELECT MAX(locationID) INTO max_locationID FROM locations
WHERE userID =NEW.userID AND dataID=NEW.dataID ;
SET NEW.locationID=max_locationID+1;
ELSE
SET NEW.locationID=1;
END IF;
END$
----------------------------------


--activity_trigger
DELIMITER $
CREATE TRIGGER activity_trigger
BEFORE INSERT ON activity
FOR EACH ROW
BEGIN
DECLARE max_DataID INT;
DECLARE max_locationID INT;
DECLARE max_activityID INT;
DECLARE condt INT;
SELECT MAX(dataID) INTO max_DataID FROM locations
WHERE userID =NEW.userID ;
SET NEW.dataID=max_DataID;
SELECT MAX(locationID) INTO max_locationID FROM locations
WHERE userID =NEW.userID AND dataID=NEW.dataID;
SET NEW.locationID=max_locationID;
SELECT COUNT(*) INTO condt FROM activity WHERE userID =NEW.userID AND dataID=NEW.dataID AND locationID=NEW.locationID;
SET max_activityID=0;
IF(condt>0) THEN
SELECT MAX(activityID) INTO max_activityID FROM activity
WHERE userID =NEW.userID AND dataID=NEW.dataID AND locationID=NEW.locationID;
SET NEW.activityID=max_activityID+1;
ELSE
SET NEW.activityID=1;
END IF;
END$
---------------------------------------


--sub_activity_trigger
DELIMITER $
CREATE TRIGGER sub_activity_trigger
BEFORE INSERT ON sub_activity
FOR EACH ROW
BEGIN
DECLARE max_DataID INT;
DECLARE max_locationID INT;
DECLARE max_activityID INT;
DECLARE max_sub_activityID INT;
DECLARE condt INT;
SELECT MAX(dataID) INTO max_DataID FROM activity
WHERE userID =NEW.userID ;
SET NEW.dataID=max_DataID;
SELECT MAX(locationID) INTO max_locationID FROM activity
WHERE userID = NEW.userID AND dataID = NEW.dataID ;
SET NEW.locationID=max_locationID;
SELECT MAX(activityID) INTO max_activityID FROM activity
WHERE userID =NEW.userID AND dataID = NEW.dataID AND locationID = NEW.locationID;
SET NEW.activityID=max_activityID;
SELECT COUNT(*) INTO condt FROM sub_activity WHERE userID =NEW.userID AND dataID=NEW.dataID AND locationID=NEW.locationID AND activityID=NEW.activityID ;
SET max_sub_activityID=0;
IF(condt>0) THEN
SELECT MAX(sub_activityID) INTO max_sub_activityID FROM sub_activity
WHERE userID =NEW.userID AND dataID=NEW.dataID AND locationID=NEW.locationID AND activityID=NEW.activityID ;
SET NEW.sub_activityID=max_sub_activityID+1;
ELSE
SET NEW.sub_activityID=1;
END IF;
END$



--eco_sub_activity_trigger
DELIMITER $
CREATE TRIGGER eco_sub_activity_trigger
AFTER INSERT ON sub_activity
FOR EACH ROW
BEGIN
DECLARE act_sum INT(11);
DECLARE eco_act_sum INT(11);
DECLARE act_type ENUM('IN_VEHICLE','EXITING_VEHICLE','IN_RAIL_VEHICLE','IN_ROAD_VEHICLE','IN_TWO_WHEELER_VEHICLE','IN_FOUR_WHEELER_VEHICLE','IN_CAR','IN_BUS','ON_BICYCLE','ON_FOOT','RUNNING','STILL','TILTING','UNKNOWN','WALKING');
DECLARE Y_M_temp VARCHAR(255);
DECLARE date_temp VARCHAR(255);
DECLARE condt INT(1);
DECLARE date_sum DATE;
SELECT NEW.activityType INTO act_type;
SELECT DATE_FORMAT(NEW.timestampMs, '%Y-%m') INTO Y_M_temp;
SELECT CONCAT(Y_M_temp, '-01') INTO date_temp;
SELECT STR_TO_DATE(date_temp,'%Y-%m-%d') INTO date_sum;
SELECT COUNT(*) INTO condt FROM eco WHERE userID =NEW.userID AND activity_date =date_sum;
IF(condt>0) THEN
SELECT eco_num INTO eco_act_sum FROM eco WHERE userID =NEW.userID AND activity_date =date_sum;
SELECT act_num INTO act_sum FROM eco WHERE userID =NEW.userID AND activity_date =date_sum;
UPDATE eco SET ecoscore=((eco_act_sum/(act_sum+1))*100), act_num=act_sum+1 WHERE userID =NEW.userID AND activity_date =date_sum;
IF (act_type LIKE "IN_RAIL%") THEN
UPDATE eco SET ecoscore=(((eco_act_sum+1)/(act_sum+1))*100), eco_num=eco_act_sum+1 WHERE userID =NEW.userID AND activity_date =date_sum;
ELSEIF (act_type LIKE "IN_BUS%") THEN
UPDATE eco SET ecoscore=(((eco_act_sum+1)/(act_sum+1))*100), eco_num=eco_act_sum+1 WHERE userID =NEW.userID AND activity_date =date_sum;
ELSEIF (act_type LIKE "ON BICYCLE%") THEN
UPDATE eco SET ecoscore=(((eco_act_sum+1)/(act_sum+1))*100), eco_num=eco_act_sum+1 WHERE userID =NEW.userID AND activity_date =date_sum;
ELSEIF (act_type LIKE "ON_FOOT%") THEN
UPDATE eco SET ecoscore=(((eco_act_sum+1)/(act_sum+1))*100), eco_num=eco_act_sum+1 WHERE userID =NEW.userID AND activity_date =date_sum;
ELSEIF (act_type LIKE "RUNNING%") THEN
UPDATE eco SET ecoscore=(((eco_act_sum+1)/(act_sum+1))*100), eco_num=eco_act_sum+1 WHERE userID =NEW.userID AND activity_date =date_sum;
ELSEIF (act_type LIKE "STILL%") THEN
UPDATE eco SET ecoscore=(((eco_act_sum+1)/(act_sum+1))*100), eco_num=eco_act_sum+1 WHERE userID =NEW.userID AND activity_date =date_sum;
ELSEIF (act_type LIKE "WALKING%") THEN
UPDATE eco SET ecoscore=(((eco_act_sum+1)/(act_sum+1))*100), eco_num=eco_act_sum+1 WHERE userID =NEW.userID AND activity_date =date_sum;
ELSEIF (act_type LIKE "EXITING_VEHICLE%") THEN
UPDATE eco SET ecoscore=(((eco_act_sum+1)/(act_sum+1))*100), eco_num=eco_act_sum+1 WHERE userID =NEW.userID AND activity_date =date_sum;
END IF;
ELSE
IF (act_type LIKE "IN_RAIL%") THEN
INSERT INTO eco VALUES(NEW.userID, date_sum, 100, 1, 1);
ELSEIF (act_type LIKE "IN_BUS%") THEN
INSERT INTO eco VALUES(NEW.userID, date_sum, 100, 1, 1);
ELSEIF (act_type LIKE "ON BICYCLE%") THEN
INSERT INTO eco VALUES(NEW.userID, date_sum, 100, 1, 1);
ELSEIF (act_type LIKE "ON_FOOT%") THEN
INSERT INTO eco VALUES(NEW.userID, date_sum, 100, 1, 1);
ELSEIF (act_type LIKE "RUNNING%") THEN
INSERT INTO eco VALUES(NEW.userID, date_sum, 100, 1, 1);
ELSEIF (act_type LIKE "STILL%") THEN
INSERT INTO eco VALUES(NEW.userID, date_sum, 100, 1, 1);
ELSEIF (act_type LIKE "WALKING%") THEN
INSERT INTO eco VALUES(NEW.userID, date_sum, 100, 1, 1);
ELSEIF (act_type LIKE "EXITING_VEHICLE%") THEN
INSERT INTO eco VALUES(NEW.userID, date_sum, 100, 1, 1);
ELSE
INSERT INTO eco VALUES(NEW.userID, date_sum, 0, 0, 1);
END IF;
END IF;
END$




